- an explanation of your data definition for bignums (why did you choose this particular implementation?)

	;; bignum

	;;   empty

	;;   (list x y) where a is a digit and b is a bignum

	;;              EXCEPT: a can't be 0 when b is empty

	;; nothing else is a bignum

	;;

	;; bignum's number representation:

	;;   each new list element indicates a power of ten, starting

	;;   with the lowest power and moving to the highest. so, each

	;;   digit represents digit*10^n position, starting with n=0

	;;   and, 0 is represented separately as empty

	We chose to represent our bignum with a reverse place value system, where the first digit is the one's place, the second the ten's place, and so on. This backward approach starting with the one's place also makes it easier to carry over, as one can add the carry over to the first of the rest of the bignum during a recursion. We chose to use just integers, as it would be easy to use the given functions in bignum-operators. We chose an empty list to represent 0 (hence "EXCEPT: a cannot be 0 when b is empty") because an empty list falls in nicely with recursion statements and base cases. Since 0 often is a base case, just listing it as another number like (list 0) would make recursing and deciding base cases more tricky.

- instructions describing what sort of expression a user would type using the procedures youâ€™ve written to do arithmetic with bignums

	To do 5*5 they would type (bignum* (list 5) (list 5))

	To do (5*10)+25 they would type (bignum+ (bignum* (list 5) (list 0 1)) (list 5 2))

- an overview of how all the pieces of your program fit together (when a user provides an input, what series of procedures are called in order to produce an output?)

	For the input (bignum+ (list 1 5) (list 4 9)), in form of (bignum+ bignum1 bignum2)

		1. Check that either bignum is empty(0) ::: in this case that is false

		2. Cons the remainder of adding the first of both bignums ::: (1 + 4)'s remainder is 5, so, so far (cons 5 ...

		3. The other half of the Cons statement is a recursive call to bignum+

			3a. The recursive call starts a Carry call inputting the rest bignum of bignum2, unless rest of bignum1 is empty then rest of bignum1 is inputted, and the quotient of adding the first of both bignums ::: (1 + 4)'s quotient is 0, so add 0 to rest of bignum1 

				3a1. Carry takes in a bignum and a num and returns the sum of the inputed bignum and num

			3b. The bignum determined in 3a is first have of recursive call ::: So, so far (cons 5 (bignum+ (list 9) ...

			3c. The second bignum of the recursive call is either the rest of bignum2, if the rest of bignum1 is empty, or the rest of bignum1 otherwise ::: So, so far from steps 1-3 (cons 5 (bignum+ (list 9) (list 5))

		4. Check that either bignum is empty(0) ::: in this case that is false

		5. So, we Cons the remainder of adding the first of both bignums ::: (9 + 5)'s remainder is 4, so, so far (cons 4 ...

		6. The other half of the Cons statement is a recursive call to bignum+

			6a. The recursive call starts a Carry call inputting the rest bignum of bignum2, unless rest of bignum1 is empty then rest of bignum1 is inputted, and the quotient of adding the first of both bignums ::: (9 + 5)'s quotient is 1, so add 1 to rest of bignum1 

				3a1. Carry takes in a bignum and a num and returns the sum of the inputed bignum and num

			6b. The bignum determined in 3a is first have of recursive call ::: So, so far (cons 5 (bignum+ (list 1) ...

			6c. The second bignum of the recursive call is either the rest of bignum2, if the rest of bignum1 is empty, or the rest of bignum1 otherwise ::: So, so far from steps 1-3 (cons 5 (cons 4 (bignum+ (list 1) empty))

		7. Check that either bignum is empty(0) ::: in this case that is true

		8. For an empty case the bignum that didn't trigger the case is returned, although it may also be empty ::: in this case both bignum1 and bignum2 are empty so empty is returned

		9. Putting the recursion together, we get (cons 5 4 1), representing the number 145, the sum of 51 and 94

	For the input (bignum* (list 1 5) (list 4 9)), in form of (bignum* bignum1 bignum2)

		1. Check if either bignum is empty (the base case) for bignum* ::: false

		2. Add the partial product of bignum2 and the first digit of bignum1 to the recursion of bignum* using bignum+ ::: (bignum+ (list 4 9) ...

			2a. To multiply the partial product bignum2 by the first digit of bignum1, there's a helper method partial-product

			2b. This helper essentially maps the multiplication by (first bignum1) to each value of bignum2 and returns it (without using map) ::: (partial-product 1 (list 4 9)) -> (list 4 9)

		3. The recursion call takes the rest of bignum1, and bignum2 with a 0 cons to the front ::: (cons 0 (bignum* (list 5) (list 0 4 9)))

		4. Now recurse, check if either bignum is empty ::: false

		5. Add the partial product of bignum2 and the first digit of bignum1 to the recursion of bignum* using bignum+ ::: (bignum+ (list 0 20 45) ...

		6. Then to finish the bignum+ statement and move to another recursion, call the rest of bignum1, and bignum2 with a 0 cons to the front (as long as bignum2 isn't already representitive of 0) ::: (cons 0 (bignum* empty (list 4 9)))

		7. Now recurse, check if either bignum is empty, in the case that is, return empty ::: true

		8. That finished the recursion, which will look something like (bignum+ (list 4 9) (bignum+ (list 0 20 45) (cons 0 empty)) -> (bignum+ (list 4 9) (list 0 0 7 4)) -> (list 4 9 7 4), presenting the number 4794, the product of 51 and 94

		

- a description of any possible bugs or problems with your program

	A possible problem is with our implementation of partial-product helper to bignum*. Because our bignum+ does a great job of dealing with carryovers using the carry helper, partial-product does not deal with any carryovers. For example, (partial-product 5 (list 1 2 3)) will return (list 5 10 15), which is an improper form of bignum, as it is not only digits. However, since it is a helper and is just part of processing through the multiplication of two bignums, it does not affect bignum*'s output. For any double-digit numbers produced by the partial-product helper, bignum+'s carry helper converts them back to a legal bignum format with only single digits.

